"""
Base strategy interface for all trading strategies.
"""
from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
from datetime import datetime

class MarketData:
    """Container for market data used by strategies."""
    def __init__(self, 
                 symbol: str, 
                 timestamp: datetime,
                 open_price: float,
                 high_price: float,
                 low_price: float,
                 close_price: float,
                 volume: float,
                 additional_data: Optional[Dict[str, Any]] = None):
        self.symbol = symbol
        self.timestamp = timestamp
        self.open = open_price
        self.high = high_price
        self.low = low_price
        self.close = close_price
        self.volume = volume
        self.additional_data = additional_data or {}

class Signal:
    """Trading signal generated by a strategy."""
    
    # Signal types
    BUY = "BUY"
    SELL = "SELL"
    CLOSE_LONG = "CLOSE_LONG"
    CLOSE_SHORT = "CLOSE_SHORT"
    
    def __init__(self, 
                 symbol: str,
                 signal_type: str,
                 timestamp: datetime,
                 price: float,
                 strength: float = 1.0,
                 metadata: Optional[Dict[str, Any]] = None):
        """
        Initialize a trading signal.
        
        Args:
            symbol: The trading symbol
            signal_type: Type of signal (BUY, SELL, etc.)
            timestamp: When the signal was generated
            price: Price at which the signal was generated
            strength: Signal strength (0.0 to 1.0)
            metadata: Additional signal information
        """
        self.symbol = symbol
        self.signal_type = signal_type
        self.timestamp = timestamp
        self.price = price
        self.strength = strength
        self.metadata = metadata or {}
    
    def __str__(self) -> str:
        return f"Signal({self.signal_type}, {self.symbol}, {self.price}, {self.timestamp})"

class Strategy(ABC):
    """Base class for all trading strategies."""
    
    def __init__(self, name: str, parameters: Dict[str, Any] = None):
        """
        Initialize a strategy with parameters.
        
        Args:
            name: Strategy name
            parameters: Strategy parameters
        """
        self.name = name
        self.parameters = parameters or {}
        self.is_initialized = False
    
    @abstractmethod
    def initialize(self) -> None:
        """Initialize strategy with parameters."""
        self.is_initialized = True
    
    @abstractmethod
    def process_market_data(self, data: MarketData) -> None:
        """
        Process new market data.
        
        Args:
            data: Market data to process
        """
        pass
    
    @abstractmethod
    def generate_signals(self) -> List[Signal]:
        """
        Generate trading signals based on processed data.
        
        Returns:
            List of trading signals
        """
        pass
    
    @abstractmethod
    def get_performance_metrics(self) -> Dict[str, float]:
        """
        Return strategy performance metrics.
        
        Returns:
            Dictionary of performance metrics
        """
        pass
    
    def set_parameter(self, key: str, value: Any) -> None:
        """
        Set a strategy parameter.
        
        Args:
            key: Parameter name
            value: Parameter value
        """
        self.parameters[key] = value
        
    def get_parameter(self, key: str, default: Any = None) -> Any:
        """
        Get a strategy parameter.
        
        Args:
            key: Parameter name
            default: Default value if parameter doesn't exist
            
        Returns:
            Parameter value
        """
        return self.parameters.get(key, default)
